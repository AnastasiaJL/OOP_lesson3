class Student:
    #описание Студента
    def __init__(self, name, surname, gender): # метод инициализации, self присутствует всегда
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
        self.average_ST = []
 
    def add_courses(self, course_name):
        self.finished_courses.append(course_name)

    def lecturer_grade(self, lecturer, course, grade):
        # Для решения задачи мы создали метод, который будет проверять,
        # что оценка выставляется именно экземпляру класса Lecturer,
        # при этом преподаватель должен быть прикреплен к соответствующему курсу,
        # а студент должен его проходить. Только в таком случае оценка будет добавляться в словарь,
        # иначе будем получать ошибку.
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'
        
    
    def average_grade_ST(self):
    # Ищем среднюю оценку
        for x, y in self.grades.items():
            result_ST = sum(y)/len(y)
        self.average_ST.append(result_ST)




    def __str__ (self):
    # Перезагружаем метод __str__
        return (f"""Имя: {self.name}
Фамилия: {self.surname}
Средняя оценка за домашние задания: {self.average_ST}
Курсы в процессе изучения: {', '.join(self.courses_in_progress)}
Завершенные курсы: {' '.join(self.finished_courses)}""")
    

 



class Mentor:
    #описание Преподавателя
    def __init__(self, name, surname):
        # метод для описания имени, фамилии, какой курс преподается
        self.name = name
        self.surname = surname
        self.courses_attached = []
        
    def rate_hw(self, student, course, grade):
        # Для решения задачи мы создали метод, который будет проверять,
        # что оценка выставляется именно экземпляру класса Student,
        # при этом преподаватель должен быть прикреплен к соответствующему курсу,
        # а студент должен его проходить. Только в таком случае оценка будет добавляться в словарь,
        # иначе будем получать ошибку.
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
        

class Lecturer (Mentor):
    # Лектор, основа взята из Преподавателя (Mentor)
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def __str__ (self):
    # Перезагружаем метод __str__
        return (f"""Имя: {self.name}
Фамилия: {self.surname}
Средняя оценка за лекции: {sum_grades_lecturer}""")
    
    def __gt__ (self, other):
        return self > other


    
class Reviewer (Mentor):
    # Эксперт, основа взята из Преподавателя (Mentor)
    def __init__(self, name, surname):
        super().__init__(name, surname)

    def rate_hw(student, course, grade):
        return super().rate_hw(course, grade)
    
    def __str__ (self):
    # Перезагружаем метод __str__
        return (f"""Имя: {self.name}
Фамилия: {self.surname}""")


some_reviewer = Reviewer('Mark', 'Print')
print (some_reviewer)

cool_mentor = Mentor('Phil', 'Loren')
cool_mentor.courses_attached += ['Python']

#Задали студента №1
some_student = Student('Ruoy', 'Eman', 'man')
some_student.finished_courses += ['Введение в програмирование']
some_student.courses_in_progress += ['Python']
some_student.courses_in_progress += ['Git']

#Проставили студенту №1 оценки
cool_mentor.rate_hw(some_student, 'Python', 2)
cool_mentor.rate_hw(some_student, 'Python', 10)
cool_mentor.rate_hw(some_student, 'Python', 9)

# #считаем среднюю оценку студента
# for i, y in some_student.grades.items():
#     sum_grades_student = sum(y)/len(y)

print (some_student)
 

# #Задали лектора №1
# some_lecturer = Lecturer('Sasha', 'Smith')
# some_lecturer.courses_attached += ['Python']
# some_lecturer.courses_attached += ['Excel']

# #Проставили лектору №1 оценку
# some_student.lecturer_grade(some_lecturer, 'Python', 9)
# some_student.lecturer_grade(some_lecturer, 'Python', 6)
# some_student.lecturer_grade(some_lecturer, 'Python', 3)

# #считаем среднюю оценку лектора №1
# for u, r in some_lecturer.grades.items():
#     sum_grades_lecturer = sum(r)/len(r)

# # print (some_lecturer)

# #Задали лектора №2
# some_lecturer2 = Lecturer('Masha', 'Lotus')
# some_lecturer2.courses_attached += ['Python']
# some_lecturer2.courses_attached += ['Java']

# #Проставили лектору №2 оценку
# some_student.lecturer_grade(some_lecturer2, 'Python', 2)
# some_student.lecturer_grade(some_lecturer2, 'Python', 2)
# some_student.lecturer_grade(some_lecturer2, 'Python', 8)

# #считаем среднюю оценку
# for u, r in some_lecturer2.grades.items():
#     sum_grades_lecturer = sum(r)/len(r)

# # print (some_lecturer2)
# print (some_lecturer > some_lecturer2)

